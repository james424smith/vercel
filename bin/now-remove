#!/usr/bin/env node

import minimist from 'minimist';
import chalk from 'chalk';
import ms from 'ms';
import table from 'text-table';
import Now from '../lib';
import login from '../lib/login';
import * as cfg from '../lib/cfg';
import { handleError, error } from '../lib/error';

const argv = minimist(process.argv.slice(2));
const deploymentId = argv._[0];

// options
const help = () => {
  console.log(`
  𝚫 now remove [deploymentId]

  Options:

    -h, --help   output usage information
    -d, --debug  Debug mode [off]

  Alias: rm
`);
};

if (argv.h || argv.help) {
  help();
  process.exit(0);
}

if (!deploymentId) {
  error('No deployment id specified. You can see active deployments with `now ls`.');
  help();
  process.exit(1);
}

// options
const debug = argv.debug || argv.d;
const apiUrl = argv.url || 'https://api.zeit.co';
const hard = argv.hard || false;

const config = cfg.read();

function readConfirmation (app) {
  return new Promise((resolve, reject) => {
    const time = chalk.gray(ms(new Date() - app.created) + ' ago');
    const tbl = table(
      [[app.uid, time, `https://${app.url}`]],
      { align: ['l', 'r', 'l'], hsep: ' '.repeat(6) }
    );

    process.stdout.write('> The following deployment will be removed permanently\n');
    process.stdout.write('  ' + tbl + '\n');
    process.stdout.write(`  ${chalk.bold.red('> Are you sure?')} ${chalk.gray('[yN] ')}`);

    process.stdin.on('data', (d) => {
      process.stdin.pause();
      resolve(d.toString().trim());
    }).resume();
  });
}

Promise.resolve(config.token || login(apiUrl))
.then(async (token) => {
  try {
    await remove(token);
  } catch (err) {
    error(`Unknown error: ${err.stack}`);
    process.exit(1);
  }
})
.catch((e) => {
  error(`Authentication error – ${e.message}`);
  process.exit(1);
});

async function remove (token) {
  const now = new Now(apiUrl, token, { debug });

  const deployments = await now.list();
  const app = deployments.find((d) => d.uid === deploymentId);

  try {
    const confirmation = (await readConfirmation(app)).toLowerCase();
    if ('y' !== confirmation && 'yes' !== confirmation) {
      console.log('\n> Aborted');
      process.exit(0);
    }

    const start = new Date();
    await now.remove(deploymentId, { hard });
    const elapsed = ms(new Date() - start);
    console.log(`${chalk.cyan('> Success!')} Deployment ${chalk.bold(deploymentId)} removed [${elapsed}]`);
  } catch (err) {
    handleError(err);
    process.exit(1);
  }

  now.close();
}

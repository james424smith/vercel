#!/usr/bin/env node
import chalk from 'chalk';
import minimist from 'minimist';
import NowAlias from '../lib/alias';
import login from '../lib/login';
import * as cfg from '../lib/cfg';
import { error } from '../lib/error';

const argv = minimist(process.argv.slice(2));
const subcommand = argv._[0];

// options
const help = () => {
  console.log(`
  ${chalk.bold('𝚫 now alias')} <ls | set | rm> <deployment> <alias>

  ${chalk.dim('Options:')}

    -h, --help   output usage information
    -d, --debug  debug mode [off]

  ${chalk.dim('Examples:')}

    Lists all your aliases:

      ${chalk.cyan('$ now alias ls')}

    Adds a particular alias to my-api.now.sh:

      ${chalk.cyan(`$ now alias set ${chalk.underline('api-ownv3nc9f8.now.sh')} ${chalk.underline('my-api.now.sh')}`)}

      The \`.now.sh\` suffix can be ommited:

      ${chalk.cyan('$ now alias set api-ownv3nc9f8 my-api')}

      The deployment id can be used as the source:

      ${chalk.cyan('$ now alias set deploymentId my-alias')}

      Custom domains work as well. They will ask you for your email
      address as we dynamically provision a certificate:

      ${chalk.cyan(`$ now alias set ${chalk.underline('api-ownv3nc9f8.now.sh')} ${chalk.underline('my-api.com')}`)}

      You can optionally put ${chalk.dim('`http://`')} or ${chalk.dim('`https://`')} in front of the
      parameters and they will be ignored.

    Removing an alias:

      ${chalk.cyan('$ now alias rm aliasId')}

      To get the list of alias ids, use \`now alias ls\`.

  ${chalk.dim('Alias:')} ln
`);
};

const exit = (code) => {
  // we give stdout some time to flush out
  // because there's a node bug where 
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(() => process.exit(code || 0), 100);
};

if (argv.h || argv.help || !subcommand) {
  help();
  exit(0);
} else {
  // options
  const debug = argv.debug || argv.d;
  const apiUrl = argv.url || 'https://api.zeit.co';

  const config = cfg.read();

  Promise.resolve(config.token || login(apiUrl))
  .then(async (token) => {
    try {
      await run(token);
    } catch (err) {
      error(`Unknown error: ${err.stack}`);
      exit(1);
    }
  })
  .catch((e) => {
    error(`Authentication error – ${e.message}`);
    exit(1);
  });
}

function getArgs (args) {
  return { url: args[1], aliases: args.slice(2) };
}

async function run (token) {
  const alias = new NowAlias(apiUrl, token, { debug });
  const { url, aliases } = getArgs(argv._);

  if ('ls' !== subcommand) {
    if (!url) {
      error('No deployment url specified. You can see active deployments with `now ls`.');
      help();
      return exit(1);
    } else if (!aliases.length) {
      error('No alias url specified. This is the URL your deployment will be tied to.');
    }
  }

  switch (subcommand) {
    case 'ls':
      await alias.ls(url);
      break;
    case 'rm':
      await alias.rm(url, aliases);
      break;
    case 'set':
      await alias.set(url, aliases);
      break;
    default:
      error('Invalid subcommand');
      help();
      exit(0);
  }
}

#!/usr/bin/env node
'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _path = require('path');

var _copyPaste = require('copy-paste');

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

var _ms = require('ms');

var _ms2 = _interopRequireDefault(_ms);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

_commander2.default.option('-d, --debug', 'Debug mode [off]', false).option('-C, --no-clipboard', 'Do not attempt to copy URL to clipboard').parse(process.argv);

var path = _commander2.default.args[_commander2.default.args.length - 1];

if (path) {
  if ('/' !== path[0]) {
    path = (0, _path.resolve)(process.cwd(), path);
  }
} else {
  path = process.cwd();
}

var debug = !!_commander2.default.debug;
var clipboard = !_commander2.default.noClipboard;
var start = Date.now();

console.log('> Deploying ' + path);

(0, _lib2.default)(path, { debug: debug }).then(function (url) {
  var elapsed = (0, _ms2.default)(new Date() - start);
  if (clipboard) {
    (0, _copyPaste.copy)(url, function (err) {
      console.log('> ' + url + ' ' + (!err ? '(copied to clipboard)' : '') + ' [' + elapsed + ']');
    });
  } else {
    console.log('> ' + url + ' [' + elapsed + ']');
  }
}, function (err) {
  error(err.message);
  process.exit(1);
});

function error(err) {
  console.error('> \u001b[31mError!\u001b[39m ' + err + '.');
}
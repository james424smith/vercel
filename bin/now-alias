#!/usr/bin/env node
import chalk from 'chalk';
import minimist from 'minimist';
import NowAlias from '../lib/alias';
import login from '../lib/login';
import * as cfg from '../lib/cfg';
import { error } from '../lib/error';

const argv = minimist(process.argv.slice(2));
const subcommand = argv._[0];

// options
const help = () => {
  console.log(`
  ${chalk.bold('𝚫 now alias')} <ls | set | rm> <deployment> <alias>

  ${chalk.dim('Options:')}

    -h, --help   output usage information
    -d, --debug  debug mode [off]

  ${chalk.dim('Examples:')}

  ${chalk.gray('–')} Lists all your aliases:

      ${chalk.cyan('$ now alias ls')}

  ${chalk.gray('–')} Adds a new alias to ${chalk.underline('my-api.now.sh')}:

      ${chalk.cyan(`$ now alias set ${chalk.underline('api-ownv3nc9f8.now.sh')} ${chalk.underline('my-api.now.sh')}`)}

      The ${chalk.dim('`.now.sh`')} suffix can be ommited:

      ${chalk.cyan('$ now alias set api-ownv3nc9f8 my-api')}

      The deployment id can be used as the source:

      ${chalk.cyan('$ now alias set deploymentId my-alias')}

      Custom domains work as alias targets:

      ${chalk.cyan(`$ now alias set ${chalk.underline('api-ownv3nc9f8.now.sh')} ${chalk.underline('my-api.com')}`)}

      ${chalk.dim('–')} The subcommand ${chalk.dim('`set`')} is the default and can be skipped.
      ${chalk.dim('–')} ${chalk.dim('`http://`')} and ${chalk.dim('`https://`')} in the target URLs are ignored.

  ${chalk.gray('–')} Removing an alias:

      ${chalk.cyan('$ now alias rm aliasId')}

      To get the list of alias ids, use ${chalk.dim('`now alias ls`')}.

  ${chalk.dim('Alias:')} ln
`);
};

// options
const debug = argv.debug || argv.d;
const apiUrl = argv.url || 'https://api.zeit.co';

const exit = (code) => {
  // we give stdout some time to flush out
  // because there's a node bug where
  // stdout writes are asynchronous
  // https://github.com/nodejs/node/issues/6456
  setTimeout(() => process.exit(code || 0), 100);
};

if (argv.h || argv.help || !subcommand) {
  help();
  exit(0);
} else {
  const config = cfg.read();

  Promise.resolve(config.token || login(apiUrl))
  .then(async (token) => {
    try {
      await run(token);
    } catch (err) {
      error(`Unknown error: ${err.stack}`);
      exit(1);
    }
  })
  .catch((e) => {
    error(`Authentication error – ${e.message}`);
    exit(1);
  });
}

async function run (token) {
  const alias = new NowAlias(apiUrl, token, { debug });

  switch (subcommand) {
    case 'list':
    case 'ls':
      await alias.ls(argv._[0]);
      break;

    case 'remove':
    case 'rm':
      await alias.rm(argv._[0]);
      break;

    case 'add':
    case 'set':
      await alias.set(argv._[0], argv._[1]);
      break;

    default:
      if (2 === argv._.length) {
        console.log(chalk.dim(`> Running \`now alias set ${argv._[0]} ${argv._[1]}\``));
        await alias.set(argv._[0], argv._[1]);
      } else if (argv._.length >= 3) {
        error('Invalid number of arguments');
        help();
        exit(1);
      } else {
        error('Please specify a valid subcommand: ls | set | rm');
        help();
        exit(1);
      }
  }
}
